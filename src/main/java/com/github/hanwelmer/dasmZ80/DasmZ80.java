package com.github.hanwelmer.dasmZ80;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

/**
 * Z80 disassembler, written in Java.
 */
// Known limitations:
// - Input file must be in Intel Hex format.
// - Input filename must have extension hex.
// - No input file to define data addresses (hard coded bytes, words, strings).
// - Binary code is assumed to be Z80 compatible.
// - Binary code is assumed to start at address 0x0000.
// - Disassembler stops at first unrecognized or illegal opcode.
// - Two output files will be generated: assembler and listing.
// - Assembler output file will have extension asm.
// - Listing output file will have extension lst.
public class DasmZ80 {
  /**
   * The main method. See usage() for a functional description.
   * 
   * @param args
   *          the argument list.
   */
  public static void main(String[] args) {
	// Options and arguments.
	ConfigurationParameters parameters = new ConfigurationParameters();

	// process command line options and arguments.
	if (args.length == 1) {
	  parameters.fileName = args[args.length - 1];
	  if (parameters.fileName.endsWith(".bin")) {
		// do the main work.
		disassemble(parameters);
	  } else {
		usage();
	  }
	} else {
	  usage();
	}
  } // main()

  private static void usage() {
	System.out.println("Usage: java -jar dasmZ80.jar filename.ext");
	System.out.println(" where filename.ext is file to be disassembled.");
	System.out.println(" Input file must be in Intel Hex format.");
	System.out.println(" Input file must be have extension .hex.");
	System.out.println(" Binary code is assumed to be Z80 compatible.");
	System.out.println(" Binary code is assumed to start at address 0x0000.");
	System.exit(1);
  } // usage()

  protected static void disassemble(ConfigurationParameters parameters) {
	BinFileReader reader = new BinFileReader();
	try {
	  reader.open(parameters);
	  writeOutput(parameters, disassemble(parameters, reader));
	} catch (FileNotFoundException e) {
	  System.out.println("Error opening file " + parameters.fileName);
	  System.out.println(e.getMessage());
	  e.printStackTrace();
	} finally {
	  reader.close();
	}
  } // disassemble()

  protected static void writeOutput(ConfigurationParameters parameters, HashMap<Integer, AssemblyCode> decoded) {
	AssemblyWriter asmWriter = new AssemblyWriter();
	ListingWriter lstWriter = new ListingWriter();
	try {
	  asmWriter.open(parameters);
	  lstWriter.open(parameters);
	  writeOutput(parameters, asmWriter, lstWriter, decoded);
	} catch (IOException e) {
	  System.out.println(e.getMessage());
	  e.printStackTrace();
	} finally {
	  if (asmWriter != null) {
		asmWriter.close();
	  }
	  if (lstWriter != null) {
		lstWriter.close();
	  }
	}
  } // writeOutput()

  private static void writeOutput(ConfigurationParameters parameters, AssemblyWriter asmWriter, ListingWriter lstWriter,
      HashMap<Integer, AssemblyCode> decoded) throws IOException {
	AssemblyCode asmCode = new AssemblyCode(0, "",
	    String.format(";File generated by dasmZ80.jar Z80 disassembler from %s\n", parameters.fileName));
	asmWriter.write(asmCode);
	lstWriter.write(asmCode);
	boolean doOrigin = true;
	for (Map.Entry<Integer, AssemblyCode> entry : decoded.entrySet()) {
	  if (doOrigin) {
		asmCode = new AssemblyCode(0, String.format(".org 0x%04X\n", 0));
		asmWriter.write(asmCode);
		lstWriter.write(asmCode);
		doOrigin = false;
	  }
	  asmWriter.write(entry.getValue());
	  lstWriter.write(entry.getValue());
	}
	asmCode = new AssemblyCode(0, ".end");
	asmWriter.write(asmCode);
	lstWriter.write(asmCode);
  } // writeOutput()

  protected static HashMap<Integer, AssemblyCode> disassemble(ConfigurationParameters parameters, ByteReader reader) {
	Decoder decoder = new Decoder();
	HashMap<Integer, AssemblyCode> decoded = new HashMap<Integer, AssemblyCode>();
	int address = 0;
	Byte nextByte = null;

	try {
	  while ((nextByte = reader.getByte()) != null) {
		AssemblyCode asmCode = decoder.get(address, nextByte, reader);
		decoded.put(address, asmCode);
		address += asmCode.getBytes().size();
	  }
	} catch (IOException e) {
	  System.out.println("Error reading from input file.");
	  System.out.println(e.getMessage());
	  e.printStackTrace();
	}
	return decoded;
  } // disassemble()

}
